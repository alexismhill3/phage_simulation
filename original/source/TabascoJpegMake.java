// This class creates the JPEGs for a Quicktime Movieimport com.sun.image.codec.jpeg.*;import javax.swing.*;import java.awt.*;import java.awt.geom.*;import java.awt.image.*;import java.io.*;/** TabascoJpegMake is class to make visualization of the output by making a stack of images of individual timepoints.  One can compile these images into a movie using standard programs (ie, QuickTime)* *  Currently this class is optimized to output an image that fits the 40,000 bp genome of T7 and its encoded genes.  The code would have to be recompiled to fit other types of genomes.** @author Sriram Kosuri* @author Jason Kelly* @version 1.0*/public class TabascoJpegMake{	/**	* The class that is called when running this class from the command-line.	 * @param args the arguments that are supposed to be passed is the output file prefix, the input file that ran the simulation, and the individual DNA files that are to be visualized	 */		public static void main(String args[]){		//testing method		String[] phageinputfiles = new String[0]; 		String molfilename = "../output/outputMol_sim1.txt";		String jpegoutputfile = "../pics/";				if(args.length<1){			 			phageinputfiles = new String[3];			phageinputfiles[0] = "../output/outputDNA_phage1_sim1.txt";			phageinputfiles[1] = "../output/outputDNA_phage2_sim1.txt";			phageinputfiles[2] = "../output/outputDNA_phage3_sim1.txt";					}else{			if(args.length>2){				phageinputfiles = new String[args.length-2];				for(int i=2;i<args.length;i++){					phageinputfiles[i-2] = args[i];				}				jpegoutputfile = args[0];				molfilename = args[1];			}else{				System.out.println("ERROR: usage: java TabascoJpegMake output_files_prefix mol_input_file tabasco_files1 tabasco_files2 ...");				System.exit(9);			}							}				TabascoJpegMake.writeFiles(phageinputfiles,molfilename,jpegoutputfile);		System.exit(0);	}	/**	 * The main method used to write files.  	 * @param phageInputFiles A string array with locations of the phage DNA files to open	 * @param molFileName A string with the location of the molecule output file from the simulation	 * @param jpegoutputFile A string with the prefix for the output files.  	 */    public static void writeFiles(String[] phageInputFiles, String molFileName, String jpegOutputFile){        String[] phageFiles = phageInputFiles;        int numOfPhages = phageFiles.length;        TabascoDraw tDraw = null;        TabascoReadMol tReadMol = new TabascoReadMol(molFileName);        TabascoRead tReadPhage[] = new TabascoRead[numOfPhages];        try{			for(int i=0;i<numOfPhages;i++){				tReadPhage[i] = new TabascoRead(phageFiles[i]);			}			tDraw = new TabascoDraw(tReadPhage[0]);		}catch(IOException e){			e.printStackTrace();			System.exit(9);		}        int LastTimePoint = tReadPhage[0].getTimePoints();                        for (int count = 0; count<LastTimePoint; count++){            String FILE_LOC =  jpegOutputFile + "frame" + count + ".jpeg";            int ScreenWidth = 1020;            int ScreenHeight = 768;            BufferedImage testImage = new BufferedImage(ScreenWidth, ScreenHeight, BufferedImage.TYPE_INT_RGB);            // String[] molNames = {"Ribosome","E.Coli Polymerase", "T7Polymerase","Custom1","Custom2"};            tReadMol.loadNextMoleculeArrayFast();                                    //Molecules            //Build array of molecules you want to graph.            int TYPES_OF_RIBOSOME = 1;                                    int numAllMolecules = tReadMol.getPolymeraseCopyNumbers().length + TYPES_OF_RIBOSOME + tReadMol.getCustomProteinCopyNumbers().length;            int[] allMolecules = new int[numAllMolecules];            String[] molNames = new String[numAllMolecules];//molecule names            Color[] molColors = new Color[numAllMolecules]; //molecule colors                                    int allMolArrayPosition = 0;            molNames[allMolArrayPosition] = "Ribosomes";            allMolecules[allMolArrayPosition] = tReadMol.getRibosomeCopyNumber();            molColors[allMolArrayPosition] = Color.blue;                                    Color paintColor = Color.magenta; //this will detect errors, nothing should be magenta.                        for (int i=0;i<tReadMol.getPolymeraseCopyNumbers().length;i++){                allMolArrayPosition++;                allMolecules[allMolArrayPosition] = tReadMol.getPolymeraseCopyNumbers()[i];                molNames[allMolArrayPosition] = tReadMol.getPolymeraseNames()[i];                if (i<tReadMol.getNumberOfColiPolymerase()){                    paintColor = Color.yellow;					for(int iColor=0;iColor<(i%3);iColor++){						paintColor = paintColor.darker();					}					                }else if(i<(tReadMol.getNumberOfT7Polymerase()+tReadMol.getNumberOfColiPolymerase())){                    paintColor = Color.red;					for(int iColor=0;iColor<(i%3);iColor++){						paintColor = paintColor.darker();					}					                }                molColors[allMolArrayPosition] = paintColor;            }            						Color[] someColors = {Color.cyan.darker(), Color.yellow.darker(), Color.orange.darker(), Color.green.darker(), Color.pink.darker()};			                        for (int i=0;i<tReadMol.getCustomProteinCopyNumbers().length;i++){                allMolArrayPosition++;                allMolecules[allMolArrayPosition] = tReadMol.getCustomProteinCopyNumbers()[i];				molNames[allMolArrayPosition] = tReadMol.getCustomProtNames()[i];				molColors[allMolArrayPosition] = someColors[i%someColors.length];            }                        int GRAPH_HEIGHT =558;			int Y_OFFSET =210;			tDraw.makeMoleculeGraph(molNames,allMolecules,molColors,tReadMol.getTime(),GRAPH_HEIGHT,Y_OFFSET,tReadMol.getRNACopyNumbers(),testImage);						int[] dna_array = tReadPhage[0].getDNAArray();			            for (int i=0;i<numOfPhages;i++){				try{					tReadPhage[i].loadNextDNAArrayFast();					testImage = TabascoDraw.makeSingleGraphic(tReadPhage[i].getComplexArrayFast(),tReadPhage[i].getMRNAStartFast(),tReadPhage[i].getMRNALengthFast(),tReadPhage[i].getMRNACopyNumberFast(),tReadPhage[i].getEnteredDNAFast(),i,numOfPhages,testImage,tReadPhage[i].getDNAArray());					tReadPhage[i].clearMemFast();					System.gc();                    //DNA				}catch(Exception e){                    e.printStackTrace();                    System.exit(9);                }            }									            try {                                FileOutputStream outStream = new FileOutputStream(FILE_LOC);                ImageToJpeg.EncodeIt(testImage, outStream);                outStream.close();            }            catch(Exception exception) {                System.out.println("IO Error:" + exception);            }            			System.out.println("Completed Image: " + count);			        }			}            }